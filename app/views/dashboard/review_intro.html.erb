<div class="pagetitle">
  <h1>研究摘要</h1>
  <nav>
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">首頁</a></li>
      <li class="breadcrumb-item">評價小組</li>
      <li class="breadcrumb-item">研究摘要</li>
    </ol>
  </nav>
</div><!-- End Page Title -->

<section class="section">
  <div class="row">
    <div class="col-lg-6">

      <div class="card">
        <div class="card-body pt-3">
          <h5 class="card-title">User Story</h5>
          <p>電商平台內的每一筆顧客評價，不僅能真實反映出買家的購物體驗，也攸關賣家的商譽和可信度，甚至連帶影響大眾對該電商平台的普遍觀感。做為電商平台，若能預測新進賣家預販售之商品將得到「好評」或「負評」，便能據此篩選合適的賣家，進而維護平台自身的聲譽，吸引更多潛在買家、提高買家的購買意願。</p>
        </div>
      </div>

    </div>

    <div class="col-lg-6">

      <div class="card">
        <div class="card-body pt-3">
          <h5 class="card-title">研究背景</h5>
          <p>《Forbes》報告顯示近 94% 的消費者會避免跟有負評的公司往來，對獲得評價低至 1~1.5 顆星的企業來說，其營收與一般企業相比更是下降了 33%。市場研究亦指出流失客戶的百分比，會隨著負評數量的增加而上升（一則負評會流失 22%，三則負評會流失 59.2%，四則以上的負評會流失高達 70%）。</p>
        </div>
      </div>

    </div>
  </div>

  <div class="row">
    <div class="col-sm-12">

      <div class="card">
        <div class="card-body">
          <h5 class="card-title">Dataset 結構概述</h5>
          <img src="dashboard/assets/img/review_dataset_info_1.png" class="img-fluid">
          <img src="dashboard/assets/img/review_dataset_info_2.png" class="img-fluid">
          <img src="dashboard/assets/img/review_dataset_info_3.png" class="img-fluid">
        </div>
      </div>

    </div>
  </div>


  <%# pieChart1 %>
  <div class="row">
    <div class="col-sm-12">

      <div class="card">
        <div class="card-body">
          <h5 class="card-title">評價分數分佈圖</h5>
          <div id="pieChart1" style="width: 100%;height: 500px;"></div>
        </div>
      </div>

    </div>
  </div>

  <%# pieChart2 %>
  <div class="row">
    <div class="col-sm-12">

      <div class="card">
        <div class="card-body">
          <h5 class="card-title">「好評」與「負評」分佈圖</h5>
          <div id="pieChart2" style="width: 100%;height: 500px;"></div>
        </div>
      </div>

    </div>
  </div>

  <%# groupedChart1 %>
  <div class="row">
    <div class="col-sm-12">

      <div class="card">
        <div class="card-body">
          <h5 class="card-title">買家購買的商品種類＆評價好壞之「分佈」</h5>
          <div id="groupedChart1" style="width: 100%;height: 500px;"></div>
        </div>
      </div>

    </div>
  </div>

  <%# StackedChart1 %>
  <div class="row">
    <div class="col-sm-12">

      <div class="card">
        <div class="card-body">
          <h5 class="card-title">買家購買的商品種類＆評價好壞之「比例」</h5>
          <div id="StackedChart1" style="width: 100%;height: 500px;"></div>
        </div>
      </div>

    </div>
  </div>

  <%# clusteredChart1 %>
  <div class="row">
    <div class="col-sm-12">

      <div class="card">
        <div class="card-body">
          <h5 class="card-title">買家購買商品的價格＆評價好壞之分佈</h5>
          <div id="clusteredChart1" style="width: 100%;height: 500px;"></div>
        </div>
      </div>

    </div>
  </div>

  <%# donutChart1 %>
  <div class="row">
    <div class="col-sm-12">

      <div class="card">
        <div class="card-body">
          <h5 class="card-title">買家購買的商品數量(Item_Count) 分佈圖</h5>
          <div id="donutChart1" style="width: 100%;height: 500px;"></div>
        </div>
      </div>

    </div>
  </div>
</section>


<%= content_for :javascript do %>
  <!-- pieChart1 -->
  <script>
    am4core.ready(function() {

    // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end

    var chart = am4core.create("pieChart1", am4charts.PieChart3D);
    chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

    chart.data = [
      {
          "country": "Review Score 5",
          "litres": 63525
      },
      {
          "country": "Review Score 4",
          "litres": 21315
      },
      {
          "country": "Review Score 3",
          "litres": 9423
      },
      {
          "country": "Review Score 2",
          "litres": 3874
      },
      {
          "country": "Review Score 1",
          "litres": 14235
      }
    ];

    chart.innerRadius = am4core.percent(40);
    chart.depth = 120;

    chart.legend = new am4charts.Legend();

    var series = chart.series.push(new am4charts.PieSeries3D());
    series.dataFields.value = "litres";
    series.dataFields.depthValue = "litres";
    series.dataFields.category = "country";
    series.slices.template.cornerRadius = 5;
    series.colors.step = 3;

    }); // end am4core.ready()
  </script>

  <!-- pieChart2 -->
  <script>
    am4core.ready(function() {

    // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end

    var chart = am4core.create("pieChart2", am4charts.PieChart3D);
    chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

    chart.data = [
      {
        "country": "Neutral Reviews",
        "litres": 9423
      },
      {
        "country": "Negative Reviews",
        "litres": 18109
      },
      {
        "country": "Positive Reviews",
        "litres": 84840
      }
    ];

    chart.innerRadius = am4core.percent(40);
    chart.depth = 120;

    chart.legend = new am4charts.Legend();

    var series = chart.series.push(new am4charts.PieSeries3D());
    series.dataFields.value = "litres";
    series.dataFields.depthValue = "litres";
    series.dataFields.category = "country";
    series.slices.template.cornerRadius = 5;
    series.colors.step = 3;

    }); // end am4core.ready()
  </script>

  <!-- groupedChart1 -->
  <script>

    am4core.ready(function() {

    // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end

    var chart = am4core.create("groupedChart1", am4charts.XYChart);

    // some extra padding for range labels
    chart.paddingBottom = 50;

    chart.cursor = new am4charts.XYCursor();
    chart.scrollbarX = new am4core.Scrollbar();

    // will use this to store colors of the same items
    var colors = {};

    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "category";
    categoryAxis.renderer.minGridDistance = 60;
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.dataItems.template.text = "{realName}";
    categoryAxis.adapter.add("tooltipText", function(tooltipText, target){
      return categoryAxis.tooltipDataItem.dataContext.realName;
    })

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis.tooltip.disabled = true;
    valueAxis.min = 0;

    // single column series for all data
    var columnSeries = chart.series.push(new am4charts.ColumnSeries());
    columnSeries.columns.template.width = am4core.percent(80);
    columnSeries.tooltipText = "{provider}: {realName}, {valueY}";
    columnSeries.dataFields.categoryX = "category";
    columnSeries.dataFields.valueY = "value";

    // second value axis for quantity
    var valueAxis2 = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis2.renderer.opposite = true;
    valueAxis2.syncWithAxis = valueAxis;
    valueAxis2.tooltip.disabled = true;

    // quantity line series
    var lineSeries = chart.series.push(new am4charts.LineSeries());
    lineSeries.tooltipText = "{valueY}";
    lineSeries.dataFields.categoryX = "category";
    lineSeries.dataFields.valueY = "quantity";
    lineSeries.yAxis = valueAxis2;
    lineSeries.bullets.push(new am4charts.CircleBullet());
    lineSeries.stroke = chart.colors.getIndex(13);
    lineSeries.fill = lineSeries.stroke;
    lineSeries.strokeWidth = 2;
    lineSeries.snapTooltip = true;

    // when data validated, adjust location of data item based on count
    lineSeries.events.on("datavalidated", function(){
    lineSeries.dataItems.each(function(dataItem){
      // if count divides by two, location is 0 (on the grid)
      if(dataItem.dataContext.count / 2 == Math.round(dataItem.dataContext.count / 2)){
      dataItem.setLocation("categoryX", 0);
      }
      // otherwise location is 0.5 (middle)
      else{
        dataItem.setLocation("categoryX", 0.5);
      }
    })
    })

    // fill adapter, here we save color value to colors object so that each time the item has the same name, the same color is used
    columnSeries.columns.template.adapter.add("fill", function(fill, target) {
    var name = target.dataItem.dataContext.realName;
    if (!colors[name]) {
      colors[name] = chart.colors.next();
    }
    target.stroke = colors[name];
    return colors[name];
    })


    var rangeTemplate = categoryAxis.axisRanges.template;
    rangeTemplate.tick.disabled = false;
    rangeTemplate.tick.location = 0;
    rangeTemplate.tick.strokeOpacity = 0.6;
    rangeTemplate.tick.length = 60;
    rangeTemplate.grid.strokeOpacity = 0.5;
    rangeTemplate.label.tooltip = new am4core.Tooltip();
    rangeTemplate.label.tooltip.dy = -10;
    rangeTemplate.label.cloneTooltip = false;

    ///// DATA
    var chartData = [];
    var lineSeriesData = [];

    var data ={
      "Category 1": {
        "1&2": 2429,
        "4&5": 13100,
        "Total": 16881,
        "quantity":4.11
      },
      "Category 2": {
        "1&2": 3238,
        "4&5": 14144,
        "Total": 19010,
        "quantity":3.98
      },
      "Category 3": {
        "1&2": 304,
        "4&5": 1782,
        "Total": 2225,
        "quantity":4.19
      },
      "Category 4": {
        "1&2": 6204,
        "4&5": 25147,
        "Total": 34549,
        "quantity":3.95
      },
        "Category 5": {
        "1&2": 3824,
        "4&5": 20892,
        "Total": 26803,
        "quantity":4.12
      },
        "Category 6": {
        "1&2": 1749,
        "4&5": 8618,
        "Total": 11282,
        "quantity":4.05
      }
    }

    // process data ant prepare it for the chart
    for (var providerName in data) {
    var providerData = data[providerName];

    // add data of one provider to temp array
    var tempArray = [];
    var count = 0;
    // add items
    for (var itemName in providerData) {
      if(itemName != "quantity"){
      count++;
      // we generate unique category for each column (providerName + "_" + itemName) and store realName
      tempArray.push({ category: providerName + "_" + itemName, realName: itemName, value: providerData[itemName], provider: providerName})
      }
    }
    // sort temp array
    tempArray.sort(function(a, b) {
      if (a.value > b.value) {
      return 1;
      }
      else if (a.value < b.value) {
      return -1
      }
      else {
      return 0;
      }
    })

    // add quantity and count to middle data item (line series uses it)
    var lineSeriesDataIndex = Math.floor(count / 2);
    tempArray[lineSeriesDataIndex].quantity = providerData.quantity;
    tempArray[lineSeriesDataIndex].count = count;
    // push to the final data
    am4core.array.each(tempArray, function(item) {
      chartData.push(item);
    })

    // create range (the additional label at the bottom)
    var range = categoryAxis.axisRanges.create();
    range.category = tempArray[0].category;
    range.endCategory = tempArray[tempArray.length - 1].category;
    range.label.text = tempArray[0].provider;
    range.label.dy = 30;
    range.label.truncate = true;
    range.label.fontWeight = "bold";
    range.label.tooltipText = tempArray[0].provider;

    range.label.adapter.add("maxWidth", function(maxWidth, target){
      var range = target.dataItem;
      var startPosition = categoryAxis.categoryToPosition(range.category, 0);
      var endPosition = categoryAxis.categoryToPosition(range.endCategory, 1);
      var startX = categoryAxis.positionToCoordinate(startPosition);
      var endX = categoryAxis.positionToCoordinate(endPosition);
      return endX - startX;
    })
    }

    chart.data = chartData;


    // last tick
    var range = categoryAxis.axisRanges.create();
    range.category = chart.data[chart.data.length - 1].category;
    range.label.disabled = true;
    range.tick.location = 1;
    range.grid.location = 1;

    }); // end am4core.ready()
  </script>

  <!-- StackedChart1 -->
  <script>
    am4core.ready(function () {

      // Themes begin
      am4core.useTheme(am4themes_animated);
      // Themes end

      var chart = am4core.create("StackedChart1", am4charts.XYChart);
      chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

      chart.data = [
        {
          "category": "category 1",
          "value1": 2429,
          "value2": 1352,
          "value3": 13100
        },
        {
          "category": "category 2",
          "value1": 3238,
          "value2": 1628,
          "value3": 14144
        },
        {
          "category": "category 3",
          "value1": 304,
          "value2": 139,
          "value3": 1782
        },
        {
          "category": "category 4",
          "value1": 6204,
          "value2": 3198,
          "value3": 25147
        },
        {
          "category": "category 5",
          "value1": 3824,
          "value2": 2087,
          "value3": 20892
        },
        {
          "category": "category 6",
          "value1": 1749,
          "value2": 915,
          "value3": 8618
        }
      ];

      chart.colors.step = 2;
      chart.padding(30, 30, 10, 30);
      chart.legend = new am4charts.Legend();

      var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
      categoryAxis.dataFields.category = "category";
      categoryAxis.renderer.grid.template.location = 0;

      var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
      valueAxis.min = 0;
      valueAxis.max = 100;
      valueAxis.strictMinMax = true;
      valueAxis.calculateTotals = true;
      valueAxis.renderer.minWidth = 50;


      var series1 = chart.series.push(new am4charts.ColumnSeries());
      series1.columns.template.width = am4core.percent(80);
      series1.columns.template.tooltipText =
        "{name}: {valueY.totalPercent.formatNumber('#.00')}%";
      series1.name = "Negative (1&2)";
      series1.dataFields.categoryX = "category";
      series1.dataFields.valueY = "value1";
      series1.dataFields.valueYShow = "totalPercent";
      series1.dataItems.template.locations.categoryX = 0.5;
      series1.stacked = true;
      series1.tooltip.pointerOrientation = "vertical";

      var bullet1 = series1.bullets.push(new am4charts.LabelBullet());
      bullet1.interactionsEnabled = false;
      bullet1.label.text = "{valueY.totalPercent.formatNumber('#.00')}%";
      bullet1.label.fill = am4core.color("#ffffff");
      bullet1.locationY = 0.5;

      var series2 = chart.series.push(new am4charts.ColumnSeries());
      series2.columns.template.width = am4core.percent(80);
      series2.columns.template.tooltipText =
        "{name}: {valueY.totalPercent.formatNumber('#.00')}%";
      series2.name = "Neutral (3)";
      series2.dataFields.categoryX = "category";
      series2.dataFields.valueY = "value2";
      series2.dataFields.valueYShow = "totalPercent";
      series2.dataItems.template.locations.categoryX = 0.5;
      series2.stacked = true;
      series2.tooltip.pointerOrientation = "vertical";

      var bullet2 = series2.bullets.push(new am4charts.LabelBullet());
      bullet2.interactionsEnabled = false;
      bullet2.label.text = "{valueY.totalPercent.formatNumber('#.00')}%";
      bullet2.locationY = 0.5;
      bullet2.label.fill = am4core.color("#ffffff");

      var series3 = chart.series.push(new am4charts.ColumnSeries());
      series3.columns.template.width = am4core.percent(80);
      series3.columns.template.tooltipText =
        "{name}: {valueY.totalPercent.formatNumber('#.00')}%";
      series3.name = "Positive (4&5)";
      series3.dataFields.categoryX = "category";
      series3.dataFields.valueY = "value3";
      series3.dataFields.valueYShow = "totalPercent";
      series3.dataItems.template.locations.categoryX = 0.5;
      series3.stacked = true;
      series3.tooltip.pointerOrientation = "vertical";

      var bullet3 = series3.bullets.push(new am4charts.LabelBullet());
      bullet3.interactionsEnabled = false;
      bullet3.label.text = "{valueY.totalPercent.formatNumber('#.00')}%";
      bullet3.locationY = 0.5;
      bullet3.label.fill = am4core.color("#ffffff");

      chart.scrollbarX = new am4core.Scrollbar();

    }); // end am4core.ready()
  </script>

  <!-- clusteredChart1 -->
  <script>
    am4core.ready(function () {

      // Themes begin
      am4core.useTheme(am4themes_animated);
      // Themes end

      var chart = am4core.create('clusteredChart1', am4charts.XYChart)
      chart.colors.step = 2;

      chart.legend = new am4charts.Legend()
      chart.legend.position = 'top'
      chart.legend.paddingBottom = 20
      chart.legend.labels.template.maxWidth = 95

      var xAxis = chart.xAxes.push(new am4charts.CategoryAxis())
      xAxis.dataFields.category = 'category'
      xAxis.renderer.cellStartLocation = 0.1
      xAxis.renderer.cellEndLocation = 0.9
      xAxis.renderer.grid.template.location = 0;

      var yAxis = chart.yAxes.push(new am4charts.ValueAxis());
      yAxis.min = 0;

      function createSeries(value, name) {
        var series = chart.series.push(new am4charts.ColumnSeries())
        series.dataFields.valueY = value
        series.dataFields.categoryX = 'category'
        series.name = name

        series.events.on("hidden", arrangeColumns);
        series.events.on("shown", arrangeColumns);

        var bullet = series.bullets.push(new am4charts.LabelBullet())
        bullet.interactionsEnabled = false
        bullet.dy = 30;
        bullet.label.text = '{valueY}'
        bullet.label.fill = am4core.color('#ffffff')

        return series;
      }


      chart.data = [
        {
          "category": "price<Q1",
          "first": 4369,
          "second": 20366
        },
        {
          "category": "Q1<price<Q2",
          "first": 4589,
          "second": 21758
        },
        {
          "category": "Q2<price<Q3",
          "first": 4525,
          "second": 21391
        },
        {
          "category": "price>Q3",
          "first": 4626,
          "second": 21325
        }
      ]

      createSeries('first', 'Negative Reviews (1&2)');
      createSeries('second', 'Positive Reviews (4&5)');

      function arrangeColumns() {

        var series = chart.series.getIndex(0);

        var w = 1 - xAxis.renderer.cellStartLocation - (1 - xAxis.renderer.cellEndLocation);
        if (series.dataItems.length > 1) {
          var x0 = xAxis.getX(series.dataItems.getIndex(0), "categoryX");
          var x1 = xAxis.getX(series.dataItems.getIndex(1), "categoryX");
          var delta = ((x1 - x0) / chart.series.length) * w;
          if (am4core.isNumber(delta)) {
            var middle = chart.series.length / 2;

            var newIndex = 0;
            chart.series.each(function (series) {
              if (!series.isHidden && !series.isHiding) {
                series.dummyData = newIndex;
                newIndex++;
              }
              else {
                series.dummyData = chart.series.indexOf(series);
              }
            })
            var visibleCount = newIndex;
            var newMiddle = visibleCount / 2;

            chart.series.each(function (series) {
              var trueIndex = chart.series.indexOf(series);
              var newIndex = series.dummyData;

              var dx = (newIndex - trueIndex + middle - newMiddle) * delta

              series.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
              series.bulletsContainer.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
            })
          }
        }
      }

    }); // end am4core.ready()
  </script>

  <!-- donutChart1 -->
  <script>
    am4core.ready(function () {

      // Themes begin
      am4core.useTheme(am4themes_animated);
      // Themes end

      var chart = am4core.create("donutChart1", am4charts.PieChart3D);
      chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

      chart.legend = new am4charts.Legend();


      chart.data = [
        { "country": "Count =1", "litres": 87758 },
        { "country": "Count =2", "litres": 15700 },
        { "country": "Count >3", "litres": 8914 }
      ]

      chart.innerRadius = 100;

      var series = chart.series.push(new am4charts.PieSeries3D());
      series.dataFields.value = "litres";
      series.dataFields.category = "country";

    }); // end am4core.ready()
  </script>
<% end %>
